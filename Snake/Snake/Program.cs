using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
// Инкапсуляция 
// - Механизм языка, позволяющий ограничить доступ одних компонентов программы к другим;
// - Языковая конструкция, позволяющая связать данные с методами, предназначенными для обработки этих данных.

// Пренебрегая формализмом и способствуя интуитивному восприятию, 
// Инкапсуляцию можно определить с помощью латинского in capsula — размещение в оболочке, 
// Изоляция, закрытие чего-либо инородного с целью исключения влияния на окружающее, 
// Обеспечение доступности главного, выделение основного содержания путём помещения всего мешающего, 
// Второстепенного в некую условную капсулу (чёрный ящик). 
// Однако данное определение является лишь приближением. 

namespace Snake
{
    class Program
    {
        static void Main(string[] args)
        {
            // Создаём переменную типа Point, но так как Point это класс
            // То используется для создания экземпляров этого класса ключевое слово new
            // Синтаксическая особенность

            Point p1 = new Point(1,3,'*');
            p1.Draw();

            // Инкапсуляция - свойство системы, позволяющее объединить данные и методы
            // Работающие с ними в классы и скрыть все детали реализации для пользователей
            // Всё что относится в точке сосредоточено в другом классе

            // При вызове new Point() вызывается специальная функция - конструктор
            // Необязательно вызывать конструктор без аргументов
            // Однако можем указать его явно
            // Конструктор имеет специальный синтаксис
            // И не имеет никакого возвращаемого значения
            // Ключевое слово void показывает, что Draw тоже ничего не возвращает

            Point p2 = new Point(4, 5, '#');
            p2.Draw();

            Console.ReadLine();
        }
            // Класс может состоять не только из данных
            // Но и из методов (функций)
            // Которые работают с этими данными
            // Спрячем функцию Draw внутри класса Point
            // Скажем что класс состоит из данных, 
            // Но ещё и из функции, которая орудует этими данными
    }
}
